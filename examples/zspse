#!/usr/bin/env bash

set -eo pipefail

usage()
{
    echo "Usage: $0 <up|destroy>"
    exit 1
}

if [ $# -ne 1 ] ; then
    usage
else
    case $1 in
      up|destroy|do)
          oper=$1
      ;;
      *)
          usage
      ;;
    esac
fi

if [[ "$oper" == "up" ]]; then
    # shellcheck disable=SC2153
    if [ -z "$dtype" ]; then
    while true; do
     read -r -p "Deployment: ( greenfield | brownfield ): " deploy

    case $deploy in
      greenfield)
          break
      ;;
      brownfield)
          break
      ;;
      *)
          echo "Invalid Deployment Type: ${dtype}"
      ;;
    esac
  done

    while [ "$deploy" == "greenfield" ]; do
     read -r -p "Deployment Type: ( base | base_pse | pse ) : " dtype

    case $dtype in
      base|base_pse|pse)
          echo "Deployment Type: ${dtype}"
          break
      ;;
      *)
          echo "Invalid Deployment Type: ${dtype}"
      ;;
    esac
  done

    while [ "$deploy" == "brownfield" ]; do
     read -r -p "Deployment Type: ( pse ) : " dtype

    case $dtype in
      ac)
          echo "Deployment Type: ${dtype}"
          break
      ;;
      *)
          echo "Invalid Deployment Type: ${dtype}"
      ;;
    esac
  done

    else
      dtype=$dtype
    fi
fi

echo "Discovering processor architecture..."
archdetect=$(uname -m)

tversion=1.1.9
echo "Detecting OS..."
if [[ "$OSTYPE" == "linux"* ]]; then
    os_str=linux
    arch=amd64
    ostype=Linux
elif [[ "$OSTYPE" == "darwin"* && $archdetect == "arm64" ]]; then
    os_str=darwin
    arch=arm64
    ostype=MacOS_arm64
elif [[ "$OSTYPE" == "darwin"* ]]; then
    os_str=darwin
    arch=amd64
    ostype=MacOS
elif [[ "$OSTYPE" == "freebsd"* ]]; then
    os_str=freebsd
    arch=amd64
    ostype=FreeBSD
    echo "FreeBSD support coming soon..."
    exit 1
else
    echo "Unsupported OS: $OSTYPE"
    exit 1
fi
echo "OS is $ostype"

dir=bin
echo "Creating a local $dir directory if not present..."
if [[ ! -e $dir ]]; then
    mkdir $dir
elif [[ ! -d $dir ]]; then
    echo "$dir already exists but is not a directory" 1>&2
    exit 1
fi

az_regions=["westus","West US","westus2","West US 2","eastus","East US","centralus","Central US","centraluseuap","Central US EUAP","southcentralus","South Central US","northcentralus","North Central US","westcentralus","West Central US","eastus2","East US 2","eastus2euap","East US 2 EUAP","brazilsouth","Brazil South","northeurope","North Europe","westeurope","West Europe","eastasia","East Asia","southeastasia","Southeast Asia","japanwest","Japan West","japaneast","Japan East","koreacentral","Korea Central","koreasouth","Korea South","southindia","South India","westindia","West India","centralindia","Central India","australiaeast","Australia East","australiasoutheast","Australia Southeast","canadacentral","Canada Central","canadaeast","Canada East","uksouth","UK South","ukwest","UK West","francecentral","France Central","francesouth","France South","australiacentral","Australia Central","australiacentral2","Australia Central 2","uaecentral","UAE Central","uaenorth","UAE North","southafricanorth","	South Africa North","southafricawest","South Africa West","switzerlandnorth","Switzerland North","switzerlandwest","Switzerland West","germanynorth","Germany North","germanywestcentral","Germany West Central","norwayeast","Norway East","norwaywest","Norway West","brazilsoutheast","Brazil Southeast","westus3","West US 3","swedencentral","Sweden Central","swedensouth","Sweden South"]
# if .zspserc is not present we'll assume that Azure env was never set
if [[ $dtype == "base" && ! -e ./.zspserc ]]; then
    echo "Checking Azure Environment Variables..."
    read -r -p "Enter Azure Subcription ID: " azure_subscription_id
    echo "export ARM_SUBSCRIPTION_ID=${azure_subscription_id}" > .zspserc
    read -r -p "Enter Directory (tenant) ID: " azure_tenant_id
    echo "export ARM_TENANT_ID=${azure_tenant_id}" >> .zspserc
    read -r -p "Enter Application (client) ID of Service Principal: " azure_client_id
    echo "export ARM_CLIENT_ID=${azure_client_id}" >> .zspserc
    read -r -p "Enter Client Secret Value of Service Principal: " azure_client_secret
    echo "export ARM_CLIENT_SECRET=${azure_client_secret}" >> .zspserc
    read -r -p "Enter Azure Region (e.g. westus2): " azure_location
    if [[ ${az_regions[*]} =~ $azure_location ]]; then
    echo "export TF_VAR_arm_location=${azure_location}" >> .zspserc
    else
    echo "Invalid Azure region name entered."
    echo "Delete .zspserc file and re-run zsec up..."
    exit 1
    fi
    while [[ "$dtype" == "base" && "$oper" == "up" ]]; do
clientpublicip=$(curl -s ifconfig.me)
    echo "greenfield deployments include a publicly accessible ssh bastion host.."
    read -r -p "Your current public IP is ${clientpublicip}. Lock SSH access to this IP? [yes/no] " bastion_response
case $bastion_response in
	yes|y )
    echo "Updating Bastion NSG to permit SSH only from ${clientpublicip}: "
    echo "export TF_VAR_bastion_nsg_source_prefix=${clientpublicip}" >> .zspserc
    useclientip=true
    break
    ;;
	no|n )
    useclientip=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done

if [[ "$useclientip" == "false" ]]; then
while true; do
read -r -p "Lock SSH access to a different IP address or range? Default is open [yes/no]: " changebastionip
case $changebastionip in
	yes|y )
    read -r -p "Enter new IP Address or CIDR range (e.g. 2.2.2.2/32): " bastionipinput
    echo "export TF_VAR_bastion_nsg_source_prefix=${bastionipinput}" >> .zspserc

if [[ $bastionipinput =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[1-9]))$ ]]
    then
    echo "$bastionipinput - IP/Netmask valid"
    else
    echo "$bastionipinput is not valid IP CIDR format"
    echo "Delete .zspserc file and re-run zsec up..."
    exit 1
fi
    break
    ;;
	no|n )
    echo "SSH access permitted for all IP addresses..."
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done
fi
fi

echo "Checking Azure Environment Variables and Private Service Edge bootstrap requirements... For custom/byo deployments, please stop and refer to the README and terraform.tfvars file instructions"
# if .zspserc is not present we'll assume that Azure env was never set
if [[ ! -e ./.zspserc ]]; then
    read -r -p "Enter Azure Subcription ID: " azure_subscription_id
    echo "export ARM_SUBSCRIPTION_ID=${azure_subscription_id}" > .zspserc
    read -r -p "Enter Directory (tenant) ID: " azure_tenant_id
    echo "export ARM_TENANT_ID=${azure_tenant_id}" >> .zspserc
    read -r -p "Enter Application (client) ID of Service Principal: " azure_client_id
    echo "export ARM_CLIENT_ID=${azure_client_id}" >> .zspserc
    read -r -p "Enter Client Secret Value of Service Principal: " azure_client_secret
    echo "export ARM_CLIENT_SECRET=${azure_client_secret}" >> .zspserc
    read -r -p "Enter Azure Region (e.g. westus2): " azure_location
    if [[ ${az_regions[*]} =~ $azure_location ]]; then
    echo "export TF_VAR_arm_location='${azure_location}'" >> .zspserc
    else
    echo "Invalid Azure region name entered."
    echo "Delete .zspserc file and re-run zsec up..."
    exit 1
    fi

    while true; do
    read -r -p "Enter ZPA Client ID: " zpa_client_id
    echo "export ZPA_CLIENT_ID=\"${zpa_client_id}\"" >> .zspserc
    read -r -p "Enter ZPA Client Secret: " zpa_client_secret
    echo "export ZPA_CLIENT_SECRET=\"${zpa_client_secret}\"" >> .zspserc
    read -r -p "Enter ZPA Customer ID: " zpa_customer_id
    echo "export ZPA_CUSTOMER_ID=\"${zpa_customer_id}\"" >> .zspserc

    read -r -p "Do you already have a Service Edge provisioning key to use? [yes/no] " prov_key_response
    case $prov_key_response in
	yes|y )
    read -r -p "Enter the name of your existing Service Edge provisioning key: " byo_provisioning_key_name
    echo "export TF_VAR_byo_provisioning_key=true" >> .zspserc
    echo "export TF_VAR_byo_provisioning_key_name=${byo_provisioning_key_name}" >> .zspserc
    break
    ;;
	no|n )
    echo "Terraform will be creating a new Service Edge Group and provisioning key"
    echo "Before proceeding, make sure you have entered all variable requirements from steps 1 and 2 in $dtype/terraform.tfvars"
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done

    while [[ "$dtype" == "base"* && "$oper" == "up" ]]; do
clientpublicip=$(curl -s ifconfig.me)
    echo "greenfield deployments include a publicly accessible ssh bastion host.."
    read -r -p "Your current public IP is ${clientpublicip}. Lock SSH access to this IP? [yes/no] " bastion_response
case $bastion_response in
	yes|y )
    echo "Updating Bastion NSG to permit SSH only from ${clientpublicip}: "
    echo "export TF_VAR_bastion_nsg_source_prefix=${clientpublicip}" >> .zspserc
    useclientip=true
    break
    ;;
	no|n )
    useclientip=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done

if [[ "$useclientip" == "false" ]]; then
while true; do
read -r -p "Lock SSH access to a different IP address or range? Default is open [yes/no]: " changebastionip
case $changebastionip in
	yes|y )
    read -r -p "Enter new IP Address or CIDR range (e.g. 2.2.2.2/32): " bastionipinput
    echo "export TF_VAR_bastion_nsg_source_prefix=${bastionipinput}" >> .zspserc

if [[ $bastionipinput =~ ^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\/(3[0-2]|[1-2][0-9]|[1-9]))$ ]]
    then
    echo "$bastionipinput - IP/Netmask valid"
    else
    echo "$bastionipinput is not valid IP CIDR format"
    echo "Delete .zspserc file and re-run zsec up..."
    exit 1
fi
    break
    ;;
	no|n )
    echo "SSH access permitted for all IP addresses..."
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done
fi

psevm_instance_type_default=Standard_D4s_v3
while true; do
    read -r -p "Enter desired Azure VM type for Private Service Edge. [Default=$psevm_instance_type_default]: " psevm_instance_type_input
psevm_instance_type=${psevm_instance_type_input:-$psevm_instance_type_default}
case $psevm_instance_type in
	Standard_D4s_v3|Standard_F4s_v2 )
    echo "Private Service Edge VM type: ${psevm_instance_type}"
    echo "export TF_VAR_psevm_instance_type=${psevm_instance_type}" >> .zspserc
    break
    ;;
	*)
    echo "Invalid Private Service Edge  VM type: ${psevm_instance_type}. Please enter an approved VM type"
    esac
done

pse_count_default=2
    read -r -p "Enter how many Private Service Edges to deploy? [Default=$pse_count_default]: " pse_count_input
pse_count=${pse_count_input:-$pse_count_default}
if ((pse_count >= 1 && pse_count <= 20)); then
    echo "${dtype} will deploy ${pse_count} Private Service Edge in ${azure_location}"
    echo "export TF_VAR_pse_count=${pse_count}" >> .zspserc
else
    echo "invalid pse_count value. Must be a number between 1 and 20"
    echo "Delete .zspserc file and re-run zsec up..."
    exit 1
fi

az_supported_regions=["australiaeast","Australia East","brazilsouth","Brazil South","canadacentral","Canada Central","centralindia","Central India","centralus","Central US","eastasia","East Asia","eastus","East US","francecentral","France Central","germanywestcentral","Germany West Central","japaneast","Japan East","koreacentral","Korea Central","northeurope","North Europe","norwayeast","Norway East","southafricanorth","South Africa North","southcentralus","South Central US","southeastasia","Southeast Asia","swedencentral","Sweden Central","uksouth","UK South","westeurope","West Europe","westus2","West US 2","westus3","West US 3"]
if [[ ${az_supported_regions[*]} =~ $azure_location ]]; then
echo "Azure region ${azure_location} supports Zones..."
zones_enabled_default=no
    while true; do
    read -r -p "Deploy Private Service Edges in dedicated Availability Zones/subnets? (Enter yes or no) [Default=$zones_enabled_default]: " zones_enabled_input
    zones_enabled=${zones_enabled_input:-$zones_enabled_default}
case $zones_enabled in
	yes|y )
    echo "export TF_VAR_zones_enabled=true" >> .zspserc
    break
    ;;
	no|n )
    echo "export TF_VAR_zones_enabled=false" >> .zspserc
    echo "No zones defined. Proceeding with availability sets fault tolerance..."
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done


if [[ "$zones_enabled" == "yes" || "$zones_enabled" == "y" ]]; then
    echo "Choose zones [1-3] to deploy in... "
    echo "If deploying only one Private Service Edge, enter yes for only one Zone (1, 2, or 3)"
    while true; do
    read -r -p "Zone 1 (yes/no): " zone1_response
case $zone1_response in
	yes|y )
    echo "Availability Zone 1 selected"
    zone1_use=true
    break
    ;;
	no|n )
    zone1_use=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done
    while true; do
    read -r -p "Zone 2 (yes/no): " zone2_response
case $zone2_response in
	yes|y )
    echo "Availability Zone 2 selected"
    zone2_use=true
    break
    ;;
	no|n )
    zone2_use=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done
    while true; do
    read -r -p "Zone 3 (yes/no): " zone3_response
case $zone3_response in
	yes|y )
    echo "Availability Zone 3 selected"
    zone3_use=true
    break
    ;;
	no|n )
    zone3_use=false
    break
    ;;
	* ) echo "invalid response. Please enter yes or no";;
    esac
done
if [[ "$zone1_use" == "true" && "$zone2_use" == "false" && "$zone3_use" == "false" ]]; then
    echo "Zones selected: 1"
    echo "export TF_VAR_zones='[\"1\"]'" >> .zspserc
elif [[ "$zone1_use" == "false" && "$zone2_use" == "true" && "$zone3_use" == "false" ]]; then
    echo "Zones selected: 2"
    echo "export TF_VAR_zones='[\"2\"]'" >> .zspserc
elif [[ "$zone1_use" == "false" && "$zone2_use" == "false" && "$zone3_use" == "true" ]]; then
    echo "Zones selected: 3"
    echo "export TF_VAR_zones='[\"3\"]'" >> .zspserc
elif [[ "$zone1_use" == "true" && "$zone2_use" == "true" && "$zone3_use" == "false" ]]; then
    echo "Zones selected: 1 and 2"
    echo "export TF_VAR_zones='[\"1\", \"2\"]'" >> .zspserc
elif [[ "$zone1_use" == "true" && "$zone2_use" == "true" && "$zone3_use" == "true" ]]; then
    echo "Zones selected: 1, 2, and 3"
    echo "export TF_VAR_zones='[\"1\", \"2\", \"3\"]'" >> .zspserc
elif [[ "$zone1_use" == "true" && "$zone2_use" == "false" && "$zone3_use" == "true" ]]; then
    echo "Zones selected: 1 and 3"
    echo "export TF_VAR_zones='[\"1\", \"3\"]'" >> .zspserc
elif [[ "$zone1_use" == "false" && "$zone2_use" == "true" && "$zone3_use" == "true" ]]; then
    echo "Zones selected: 2 and 3"
    echo "export TF_VAR_zones='[\"2\", \"3\"]'" >> .zspserc
else
    echo "Invalid Zones selection. exiting..."
    echo "Delete .zspserc file and re-run zsec up..."
    exit 1
  fi
fi
else
echo "Azure region ${azure_location} does not support Zones. Proceeding..."
fi

fi


 #add local bin directory to PATH
if ! grep -Fxq "export PATH=\${PATH}:\${PWD}/bin" .zspserc; then
    echo 'export PATH=${PATH}:${PWD}/bin' >> .zspserc
fi

# add deployment type to .zspserc for future runs
if [[ "$oper" == "up" ]]; then
    echo "Updating .zspserc with dtype of $dtype"
    sed -i'' -e '/dtype/d' .zspserc
    echo "export dtype=${dtype}" >> .zspserc
fi

# initialize environment variables
. ./.zspserc

# check for valid environment variables in .zspserc
if [ -z "$ARM_CLIENT_ID" ] || [ -z "$ARM_CLIENT_SECRET" ] || [ -z "$ARM_SUBSCRIPTION_ID" ] || [ -z "$ARM_TENANT_ID" ] || [ -z "$TF_VAR_arm_location" ]; then
    echo "Azure Access info is missing. Remove .zspserc file and rerun $0 $1"
    exit 1
fi

echo "Download terraform binary for $ostype if not present..."
if [[ ! -e ./$dir/terraform ]]; then
    curl -o ./$dir/terraform_${tversion}_${arch}.zip https://releases.hashicorp.com/terraform/$tversion/terraform_${tversion}_${os_str}_${arch}.zip
    unzip ./$dir/terraform_${tversion}_${arch}.zip -d ./$dir
    rm -f ./$dir/terraform_${tversion}_${arch}.zip
fi

if [[ "$oper" == "do" ]]; then
    exit 1
fi

if [[ "$oper" == "up" ]]; then
    echo "Bringing up Private Service Edge cluster..."
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply -auto-approve
    else
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" apply
    fi

elif [[ "$oper" == "destroy" ]]; then
    echo "Destroying Private Service Edge cluster..."
    TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" init
    if [[ "$AUTO_APPROVE" ]]; then
        TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy -auto-approve
    else
      TF_DATA_DIR=../.terraform ./$dir/terraform -chdir="$dtype" destroy
    fi
    echo "Removing Terraform files and directories..."
    rm -rf bin
    rm -rf **/.terraform/* && rm -rf **/.terraform*
    find . -type f -name '.terraform.lock.hcl' -delete
    rm -rf .terraform* && rm -f terraform.tfstate*
    rm -f *.pem && rm -f *.pem.pub
    rm -f name_prefix random_string
    rm -rf user.key user.crt
    rm -rf systems.json setup-*.tar
    rm -rf **/errorlog.txt
now=$(date +'%Y-%m-%d-%H_%M_%S')
    echo "archiving .zspserc file to .zspserc-${now}"
    cp .zspserc .zspserc-${now}
    rm -rf .zspserc && rm -rf .zspserc.bak
fi
